"use strict";
/**
 * @file Misc blurt type definitions.
 * @author BeBlurt <https://beblurt.com/@beblurt>
 * @description adaptation of Johan Nordberg <code@johan-nordberg.com> Misc blurt type definitions.
 * @license
 * Copyright (c) 2017 Johan Nordberg. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  1. Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *  2. Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * You acknowledge that this software is not designed, licensed or intended for use
 * in the design, construction, operation or maintenance of any military facility.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVests = exports.getVestingSharePrice = exports.HexBuffer = void 0;
const asset_1 = require("./asset");
/**
 * Buffer wrapper that serializes to a hex-encoded string.
 */
class HexBuffer {
    constructor(buffer) {
        this.buffer = buffer;
    }
    /**
     * Convenience to create a new HexBuffer, does not copy data if value passed is already a buffer.
     */
    static from(value) {
        if (value instanceof HexBuffer) {
            return value;
        }
        else if (value instanceof Buffer) {
            return new HexBuffer(value);
        }
        else if (typeof value === 'string') {
            return new HexBuffer(Buffer.from(value, 'hex'));
        }
        else {
            return new HexBuffer(Buffer.from(value));
        }
    }
    toString(encoding = 'hex') {
        return this.buffer.toString(encoding);
    }
    toJSON() {
        return this.toString();
    }
}
exports.HexBuffer = HexBuffer;
/** Return the vesting share price. */
exports.getVestingSharePrice = (props) => {
    const totalVestingFund = asset_1.Asset.from(props.total_vesting_fund_blurt);
    const totalVestingShares = asset_1.Asset.from(props.total_vesting_shares);
    if (totalVestingFund.amount === 0 || totalVestingShares.amount === 0) {
        return new asset_1.Price(new asset_1.Asset(1, 'VESTS'), new asset_1.Asset(1, 'BLURT'));
    }
    return new asset_1.Price(totalVestingShares, totalVestingFund);
};
/** Returns the vests of specified account. Default: Subtract delegated & add received */
exports.getVests = (account, subtract_delegated = true, add_received = true) => {
    let vests = asset_1.Asset.from(account.vesting_shares);
    const vests_delegated = asset_1.Asset.from(account.delegated_vesting_shares);
    const vests_received = asset_1.Asset.from(account.received_vesting_shares);
    const withdraw_rate = asset_1.Asset.from(account.vesting_withdraw_rate);
    const already_withdrawn = (Number(account.to_withdraw) - Number(account.withdrawn)) / 1000000;
    const withdraw_vests = Math.min(withdraw_rate.amount, already_withdrawn);
    vests = vests.subtract(withdraw_vests);
    if (subtract_delegated) {
        vests = vests.subtract(vests_delegated);
    }
    if (add_received) {
        vests = vests.add(vests_received);
    }
    return vests.amount;
};
