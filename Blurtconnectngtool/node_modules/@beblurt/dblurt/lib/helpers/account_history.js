"use strict";
/**
 * @file Blurt Account History API helpers.
 * @author BeBlurt <https://beblurt.com/@beblurt>
 * @description adaptation from Johan Nordberg <code@johan-nordberg.com> Database API helpers.
 * @license
 * Copyright (c) 2017 Johan Nordberg. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  1. Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *  2. Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * You acknowledge that this software is not designed, licensed or intended for use
 * in the design, construction, operation or maintenance of any military facility.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountHistoryAPI = void 0;
class AccountHistoryAPI {
    constructor(client) {
        this.client = client;
    }
    /** Convenience for calling `account_history_api`. */
    call(method, params) {
        return this.client.call('account_history_api', method, params);
    }
    /**
     * Returns specific range of blocks to retrieve virtual operations for
     *
     * @param block_range_begin:int starting block number (inclusive) to search for virtual operations
     * @param block_range_end:int last block number (exclusive) to search for virtual operations
     * @param include_reversible:boolean (optional) If set to true also operations from reversible block will be included if block_num points to such block.
     * @param group_by_block (optional) true/false
     * @param operation_begin (optional) starting virtual operation in given block (inclusive)
     * @param limit (optional) a limit of retrieved operations
     * @param filter (optional) a filter that decides which an operation matches - Generated by utils.makeBitMaskFilter() - see example below (not yet usable)
     *
     */
    enumVirtualOps(params) {
        return this.call('enum_virtual_ops', params);
    }
    /**
     * Returns all operations contained in a block.
     * @param block_num:int
     * @param only_virtual:boolean
     * @param include_reversible:boolean (optional) If set to true also operations from reversible block will be included if block_num points to such block.
     */
    getOpsInBlock(block_num, only_virtual = false, include_reversible = true) {
        return this.call('get_ops_in_block', { block_num, only_virtual, include_reversible });
    }
}
exports.AccountHistoryAPI = AccountHistoryAPI;
