/**
 * @file Blurt Broadcast API helpers.
 * @author BeBlurt <https://beblurt.com/@beblurt>
 * @description adaptation from Johan Nordberg <code@johan-nordberg.com> Broadcast API helpers.
 * @license
 * Copyright (c) 2017 Johan Nordberg. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  1. Redistribution of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *  2. Redistribution in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder nor the names of its contributors
 *     may be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * You acknowledge that this software is not designed, licensed or intended for use
 * in the design, construction, operation or maintenance of any military facility.
 */
import { AccountCreateOperation, AccountUpdateOperation, AccountWitnessVoteOperation, CancelTransferFromSavingsOperation, ChangeRecoveryAccountOperation, ClaimAccountOperation, ClaimRewardBalanceOperation, CommentOperation, CommentOptionsOperation, CreateClaimedAccountOperation, CustomJsonOperation, DelegateVestingSharesOperation, Operation, TransferOperation, VoteOperation } from '../chain/operation';
import { NexusUpdateProps } from '../chain/nexus';
import { SignedTransaction, Transaction, TransactionConfirmation } from '../chain/transaction';
import { Client } from '../client';
import { PrivateKey } from '../crypto';
export declare class BroadcastAPI {
    readonly client: Client;
    /**
     * How many milliseconds in the future to set the expiry time to when
     * broadcasting a transaction, defaults to 1 minute.
     */
    expireTime: number;
    constructor(client: Client);
    /** Convenience for calling `condenser_api`. */
    call(method: string, params?: any[]): Promise<any>;
    /**
     * Create account.
     * Broadcasted to the blockchain to create a new account.
     * @param data The account_create payload. See {@link AccountCreateOperation}
     * @param key The Active or Owner private key of the account creator.
     */
    accountCreate(data: AccountCreateOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Update account.
     * Updates account information.
     * @param data The account_update payload. See {@link AccountUpdateOperation}
     * @param key The Active or Owner private key of the account.
     */
    accountUpdate(data: AccountUpdateOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Witness vote.
     * Vote from an account to a witness.
     * @param data The account_witness_vote payload. See {@link AccountWitnessVoteOperation}
     * @param key The private key of the account, should be the Active key at least.
     * @remarks Since HF 0.8 the formula VS/N where VP is the Vesting Share of the account and N the number of witnesses upvoted by the account is applied.
     */
    accountWitnessVote(data: AccountWitnessVoteOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Cancel transfer from saving.
     * Funds withdrawals from the savings can be canceled at any time before it is executed.
     * @param data The cancel_transfer_from_savings payload. See {@link CancelTransferFromSavingsOperation}
     * @param key The private key of the account, should be the Active key at least.
     */
    cancelTransferFromSavings(data: CancelTransferFromSavingsOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Change recovery account.
     * Funds withdrawals from the savings can be canceled at any time before it is executed.
     * @param data The change_recovery_account payload. See {@link ChangeRecoveryAccountOperation}
     * @param key The Owner private key of the account.
     */
    changeRecoveryAccount(data: ChangeRecoveryAccountOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Claim account.
     * Requests from users or dApps to get an account creation ticket in order to create new accounts.
     * These operations are issued before the actual creation of the account on the blockchain.
     * @param data The claim_account payload. See {@link ClaimAccountOperation}
     * @param key The Active or Owner private key of the account.
     * @remarks Deactivated Since HF 0.2
     */
    claimAccount(data: ClaimAccountOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Claim reward balance.
     * Author and curator rewards are not automatically transferred to the account’s balances.
     * One has to issue a `claim_reward_balance` operation to trigger the transfer from the reward pool to its balance.
     * @param data The claim_reward_balance payload. See {@link ClaimRewardBalanceOperation}
     * @param key The Posting, Active or Owner private key of the account.
     */
    claimRewardBalance(data: ClaimRewardBalanceOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Comment.
     * Creates a post/comment.
     * @param data The comment payload. See {@link CommentOperation}
     * @param key The Posting, Active or Owner private key of the account.
     * @param options The comment_options payload [optional]. See {@link CommentOptionsOperation}
     * @remarks Rules:
     * - The “title” must not be longer than 256 bytes
     * - The “title” must be UTF-8
     * - The “body” must be larger than 0 bytes
     * - The “body” much also be UTF-8
     * @remarks json_metadata: There is no blockchain enforced validation on `json_metadata`, but the community has adopted a particular structure:
     * - tags - An array of up to 5 strings. Although the blockchain will accept more than 5, the tags plugin only looks at the first five
     * - app - A user agent style application identifier. Typically app_name/version, e.g. beblurt/0.1
     * - format - The format of the body, e.g. markdown
     * @remarks In addition to the above keys, application developers are free to add any other keys they want to help manage the content they broadcast.
     * @remarks When a comment is first broadcast, the permlink must be unique for the author. Otherwise, it is interpreted as an update operation.
     *  Updating will either replace the entire body with the latest operation or patch the body if using {@link [diff-match-patch](https://github.com/google/diff-match-patch)}.
     */
    comment(data: CommentOperation[1], key: PrivateKey, options?: CommentOptionsOperation[1]): Promise<TransactionConfirmation>;
    /**
     * Comment options.
     * Authors of posts may not want all of the benefits that come from creating a post. This operation allows authors to update properties associated with their post.
     * Typically, these options will accompany a comment operation in the same transaction.
     * @param data The comment_options payload. See {@link CommentOptionsOperation}
     * @param key The Active or Owner private key of the account creator.
     */
    commentOptions(data: CommentOptionsOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Create claimed account.
     * When used with `claim_account`, works identically to `account_create` See {@link accountCreate}.
     * @param data The create_claimed_account payload. See {@link CreateClaimedAccountOperation}
     * @param key The Active or Owner private key of the account creator.
     * @remarks Deactivated Since HF 0.2
     */
    createClaimedAccount(data: CreateClaimedAccountOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Broadcast custom JSON.
     * Serves the same purpose as custom but also supports required posting authorities. Unlike custom, this operation is designed to be human readable/developer friendly.
     * @param data The custom_json operation payload. See {@link CustomJsonOperation}
     * @param key The Posting, Active or Owner private key of the account.
     */
    customJson(data: CustomJsonOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Delegate vesting shares from one account to the other. The vesting shares are still owned
     * by the original account, but content voting rights and bandwidth allocation are transferred
     * to the receiving account. This sets the delegation to `vesting_shares`, increasing it or
     * decreasing it as needed. (i.e. a delegation of 0 removes the delegation)
     *
     * When a delegation is removed the shares are placed in limbo for a week to prevent a satoshi
     * of VESTS from voting on the same content twice.
     *
     * @param options Delegation options. See {@link DelegateVestingSharesOperation}
     * @param key Private active key of the delegator.
     */
    delegateVestingShares(options: DelegateVestingSharesOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Prepare transaction with operations for Sign and broadcast to the network.
     * @param operations List of operations to send.
     */
    prepareTransaction(operations: Operation[]): Promise<Transaction>;
    /**
     * Reblurt/Undo Reblurt a post
     * @param account The account submitting the custom_json operation.
     * @param author The author of the post.
     * @param permlink The permlink of the post.
     * @param undo if true Undo Reblurt else Reblurt
     * @param key The Posting, Active or Owner private key of the account.
     **/
    reblurt(account: string, author: string, permlink: string, undo: boolean | undefined, key: PrivateKey): Promise<TransactionConfirmation>;
    /** Broadcast a read notification to the network. */
    readNotification(account: string, date: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /** Broadcast a signed transaction to the network. */
    send(transaction: SignedTransaction): Promise<TransactionConfirmation>;
    /**
     * Sign and broadcast transaction with operations to the network. Throws if the transaction expires.
     * @param operations List of operations to send.
     * @param key Private key(s) used to sign transaction.
     */
    sendOperations(operations: Operation[], key: PrivateKey | PrivateKey[]): Promise<TransactionConfirmation>;
    /** Sign a transaction with key(s) */
    sign(transaction: Transaction, key: PrivateKey | PrivateKey[]): SignedTransaction;
    /**
     * Broadcast a transfer.
     * @param data The transfer operation payload.
     * @param key Private active key of sender.
     */
    transfer(data: TransferOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Broadcast a vote.
     * @param vote The vote to send.
     * @param key Private posting key of the voter.
     */
    vote(vote: VoteOperation[1], key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Mute a post (Mods or higher). Can be a topic or a comment.
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The author of the post.
     * @param permlink The permlink of the post.
     * @param notes short notes
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusMutePost(community: string, authority: string, account: string, permlink: string, notes: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Stickies a post to the top of the community homepage (Mods or higher). If multiple posts are stickied, the newest ones are shown first.
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The author of the post.
     * @param permlink The permlink of the post.
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusPinPost(community: string, authority: string, account: string, permlink: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Stickies a post to the top of the community homepage (Mods or higher). If multiple posts are stickied, the newest ones are shown first.
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The account submitting the custom_json operation.
     * @param role The author of the post.
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusSetRole(community: string, authority: string, account: string, role: 'admin' | 'mod' | 'member' | 'guest' | 'muted', key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Stickies a post to the top of the community homepage (Mods or higher). If multiple posts are stickied, the newest ones are shown first.
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The account submitting the custom_json operation.
     * @param title title for the account
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusSetUserTitle(community: string, authority: string, account: string, title: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Unmute a post (Mods or higher).
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The author of the post.
     * @param permlink The permlink of the post.
     * @param notes short notes
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusUnmutePost(community: string, authority: string, account: string, permlink: string, notes: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Removes a post to the top of the community homepage (Mods or higher).
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param account The author of the post.
     * @param permlink The permlink of the post.
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusUnpinPost(community: string, authority: string, account: string, permlink: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Broadcast Nexus update properties (Admin Operations).
     * Update display settings of a Community.
     * @param data The custom_json operation payload. See {@link NexusUpdateProps}
     * @param authority The account submitting the custom_json operation.
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusUpdateProps(data: NexusUpdateProps, authority: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Used by guests to suggest a post for the review queue. It’s up to the community to define what constitutes flagging.
     * @param community The community account concerned.
     * @param authority The account submitting the custom_json operation.
     * @param author The author of the post.
     * @param permlink The permlink of the post.
     * @param notes short notes
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusFlagPost(community: string, authority: string, account: string, permlink: string, notes: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Un/subscribe to a community (Guest Operations)
     * @param community The community account concerned.
     * @param action Un/subscribe to a community.
     * @param account The account submitting the custom_json operation.
     * @param key The Posting, Active or Owner private key of the account.
     **/
    nexusSubscription(community: string, action: 'subscribe' | 'unsubscribe', account: string, key: PrivateKey): Promise<TransactionConfirmation>;
    /**
     * Stickies a post to the top of the community homepage (Mods or higher). If multiple posts are stickied, the newest ones are shown first.
     * @param authority The account submitting the custom_json operation.
     * @param referrer The referrer of the account.
     * @param campaign The campaign id of the referrer.
     * @param key The Posting, Active or Owner private key of the account.
     */
    nexusAddReferrer(authority: string, referrer: string, campaign: string, key: PrivateKey): Promise<TransactionConfirmation>;
}
