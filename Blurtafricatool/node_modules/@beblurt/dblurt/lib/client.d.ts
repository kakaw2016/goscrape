/// <reference types="node" />
import { AccountHistoryAPI } from './helpers/account_history';
import { Blockchain } from './helpers/blockchain';
import { BroadcastAPI } from './helpers/broadcast';
import { CondenserAPI } from './index-browser';
import { DatabaseAPI } from './helpers/database';
import { Nexus } from './helpers/nexus';
import { Tools } from './helpers/tools';
/** Library version. */
export declare const VERSION: string;
/** Main Blurt network chain id */
export declare const DEFAULT_CHAIN_ID: Buffer;
/** Main Blurt network address prefix */
export declare const DEFAULT_ADDRESS_PREFIX = "BLT";
/**
 * RPC Client options
 * ------------------
 */
export interface ClientOptions {
    /** Blurt chain id. Defaults `cd8d90f29ae273abec3eaa7731e25934c63eb654d55080caff2ebb7f5df6381f` */
    chainId?: string;
    /** Blurt address prefix. Defaults to main network: `BLT`*/
    addressPrefix?: string;
    /** how long to wait in milliseconds before giving up on a rpc call. Defaults to 60 * 1000 ms. */
    timeout?: number;
    /**
     * Specifies the amount of times the urls (RPC nodes) should be
     * iterated and retried in case of timeout errors.
     * (important) Requires url parameter to be an array (string[])!
     * Can be set to 0 to iterate and retry forever. Defaults to 3 rounds.
     */
    failoverThreshold?: number;
    /** Whether a console.log should be made when RPC failed over to another one */
    consoleOnFailover?: boolean;
    /** Retry backoff function, returns milliseconds. Default = {@link defaultBackoff}. */
    backoff?: (tries: number) => number;
    /** Node.js http(s) agent, use if you want http keep-alive. @see https://nodejs.org/api/http.html#http_new_agent_options. */
    agent?: any;
}
/**
 * RPC Client
 * ----------
 * Can be used in both node.js and the browser. Also see {@link ClientOptions}.
 */
export declare class Client {
    /** Client options, *read-only*. */
    readonly options: ClientOptions;
    /** Address to Blurt RPC server. String or String[] *read-only* */
    address: string | string[];
    /** Account History API helper */
    readonly accountHistory: AccountHistoryAPI;
    /** Blockchain helper */
    readonly blockchain: Blockchain;
    /** Broadcast API helper */
    readonly broadcast: BroadcastAPI;
    /** Condenser API helper */
    readonly condenser: CondenserAPI;
    /** Database API helper. */
    readonly database: DatabaseAPI;
    /** Nexus (A.k.a. Bridge) helper */
    readonly nexus: Nexus;
    /** Tools helper */
    readonly tools: Tools;
    /** Chain ID for current network. */
    readonly chainId: Buffer;
    /** Address prefix for current network. */
    readonly addressPrefix: string;
    currentAddress: string;
    private timeout;
    private backoff;
    private failoverThreshold;
    private consoleOnFailover;
    /**
     * @param address The address to the Blurt RPC server,
     * e.g. `https://rpc.blurt.world`. or [`https://rpc.blurt.world`, `https://another.api.com`]
     * @param options Client options.
     */
    constructor(address: string | string[], options?: ClientOptions);
    /**
     * Make a RPC call to the server.
     *
     * @param api     The API to call, e.g. `database_api`.
     * @param method  The API method, e.g. `get_dynamic_global_properties`.
     * @param params  Array of parameters to pass to the method, optional.
     *
     */
    call(api: string, method: string, params?: any): Promise<any>;
}
